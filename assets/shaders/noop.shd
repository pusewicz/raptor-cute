layout(set = 2, binding = 1) uniform sampler2D canvas_tex;

const float scanline_count = 50.0;
const vec2 SCREEN_PIXEL_SIZE = vec2(1.0 / 768.0, 1.0 / 768.0); // Adjust based on your screen resolution

vec2 uv_curve(vec2 uv)
{
	uv = (uv - 0.5) * 2.0;
	
	//You can modify the numbers and try different values
	uv.x *= 1.0 + pow(abs(uv.y) / 3.0, 2.0);
	uv.y *= 1.0 + pow(abs(uv.x) / 3.0, 2.0);
	
	//The scale part (you can delete it when you want)
	uv /= 1.0;
	
	uv = (uv/2.0) + 0.5;
	return uv;
}

vec4 shader(vec4 color, vec2 pos, vec2 screen_uv, vec4 params)
{
	float PI = 3.14159;
	
	//You can modify the *3.0, *-3.0 for a bigger or smaller 
	float r = texture(canvas_tex, uv_curve(screen_uv) + vec2(SCREEN_PIXEL_SIZE.x*0.0), 0.0).r;
	float g = texture(canvas_tex, uv_curve(screen_uv) + vec2(SCREEN_PIXEL_SIZE.x*1.0), 0.0).g;
	float b = texture(canvas_tex, uv_curve(screen_uv) + vec2(SCREEN_PIXEL_SIZE.x*-1.0), 0.0).b;
	
	//If you dont want scanlines you can just delete this part
	float s = sin(uv_curve(screen_uv).y * scanline_count * PI * 2.0);
	s = (s * 0.5 + 0.5) * 0.9 + 0.1;
	vec4 scan_line = vec4(vec3(pow(s, 0.25)), 3.0);
	return vec4(r, g, b, 1.0) * scan_line;
}
